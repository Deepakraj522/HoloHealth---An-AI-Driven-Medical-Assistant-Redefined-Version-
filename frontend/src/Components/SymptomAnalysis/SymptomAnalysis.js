import React, { useState, useContext } from "react";import styled from "styled-components";import { FilterContext } from "../../context/FilterContext";import AIConsult from "./AIConsult";import { notes } from "../../utils/Icons";import DiseaseMapping from '../../config/disease.json'const SymptomAnalysis = ({ updateActive }) => {  const { setDoctorSpec } = useContext(FilterContext);  const [submitted, setSubmitted] = useState(false);  const [diagnosis, setDiagnosis] = useState("undefined");  const [outcome, setOutcome] = useState(false);  const [consultAI, setConsultAI] = useState(false);  const [selectedTags, setSelectedTags] = useState([]);  const availableTags = [    { id: 'fever', label: 'Fever', category: 'general' },    { id: 'headache', label: 'Headache', category: 'neurological' },    { id: 'cough', label: 'Cough', category: 'respiratory' },    { id: 'sore_throat', label: 'Sore Throat', category: 'respiratory' },    { id: 'runny_nose', label: 'Runny Nose', category: 'respiratory' },    { id: 'difficulty_breathing', label: 'Difficulty Breathing', category: 'respiratory' },    { id: 'chest_pain', label: 'Chest Pain', category: 'cardiovascular' },    { id: 'fatigue', label: 'Fatigue', category: 'general' },    { id: 'muscle_aches', label: 'Muscle Aches', category: 'musculoskeletal' },    { id: 'joint_pain', label: 'Joint Pain', category: 'musculoskeletal' },    { id: 'nausea', label: 'Nausea', category: 'gastrointestinal' },    { id: 'vomiting', label: 'Vomiting', category: 'gastrointestinal' },    { id: 'diarrhea', label: 'Diarrhea', category: 'gastrointestinal' },    { id: 'abdominal_pain', label: 'Abdominal Pain', category: 'gastrointestinal' },    { id: 'dizziness', label: 'Dizziness', category: 'neurological' },    { id: 'skin_rash', label: 'Skin Rash', category: 'dermatological' },    { id: 'itching', label: 'Itching', category: 'dermatological' },    { id: 'swelling', label: 'Swelling', category: 'general' },    { id: 'sleep_issues', label: 'Sleep Issues', category: 'general' },    { id: 'appetite_loss', label: 'Loss of Appetite', category: 'general' }  ];  const tagCategories = {    general: { name: 'General', color: '#3B82F6' },    respiratory: { name: 'Respiratory', color: '#10B981' },    neurological: { name: 'Neurological', color: '#8B5CF6' },    cardiovascular: { name: 'Cardiovascular', color: '#EF4444' },    musculoskeletal: { name: 'Musculoskeletal', color: '#F59E0B' },    gastrointestinal: { name: 'Gastrointestinal', color: '#06B6D4' },    dermatological: { name: 'Dermatological', color: '#EC4899' }  };  const handleTagToggle = (tagId) => {    setSelectedTags(prev =>       prev.includes(tagId)         ? prev.filter(id => id !== tagId)        : [...prev, tagId]    );  };  const [formData, setFormData] = useState({    fever: "Yes",    cough: "Yes",    fatigue: "Yes",    difficulty_breathing: "Yes",    age: 25,    gender: "Male",    blood_pressure: "Low",    cholesterol: "Normal"  });  const handleChange = (e) => {    const { name, value } = e.target;    setFormData({ ...formData, [name]: value });  };  const handleConsultDoctor = () => {    console.log("diagnosis : ", diagnosis);    if (diagnosis != "undefined" || diagnosis != undefined) {      console.log(DiseaseMapping[diagnosis]);      setDoctorSpec(DiseaseMapping[diagnosis]);    }    updateActive(4);  };  const handleConsultAI = () => {    setConsultAI(true);  };  const handleSliderChange = (e) => {    setFormData({ ...formData, age: parseInt(e.target.value) });  };  const handleSubmit = () => {    console.log("Submitted Data:", formData);    console.log("Selected Tags:", selectedTags);    const submitData = {      ...formData,      symptoms: selectedTags.map(tagId => {        const tag = availableTags.find(t => t.id === tagId);        return tag.label;      })    };    const url = "http://127.0.0.1:5000/predict";    const options = {      method: "POST",      headers: {        "Content-Type": "application/json",      },      body: JSON.stringify(submitData),    };    fetch(url, options)      .then((response) => {        if (!response.ok) {          throw new Error("Network response was not ok");        }        return response.json();      })      .then((data) => {        console.log("Response:", data);        setDiagnosis(data.disease || data.prediction);        setOutcome(data.status || data.confidence > 70)      })      .catch((error) => {        console.error("There was a problem with your fetch operation:", error);      });    setSubmitted(true);  };  return (    <>        {!submitted && (<FormContainer>        <h2>HoloHealth</h2>        {}        <TagSection>          <h3>Select Your Symptoms</h3>          <p>Choose the symptoms you're experiencing to help with accurate analysis:</p>          {Object.entries(tagCategories).map(([categoryKey, category]) => (            <TagCategory key={categoryKey}>              <CategoryHeader style={{ color: category.color }}>                {category.name}              </CategoryHeader>              <TagGrid>                {availableTags                  .filter(tag => tag.category === categoryKey)                  .map(tag => (                    <Tag                      key={tag.id}                      selected={selectedTags.includes(tag.id)}                      categoryColor={category.color}                      onClick={() => handleTagToggle(tag.id)}                    >                      {tag.label}                    </Tag>                  ))                }              </TagGrid>            </TagCategory>          ))}          {selectedTags.length > 0 && (            <SelectedTagsSection>              <h4>Selected Symptoms ({selectedTags.length}):</h4>              <SelectedTagsList>                {selectedTags.map(tagId => {                  const tag = availableTags.find(t => t.id === tagId);                  const category = tagCategories[tag.category];                  return (                    <SelectedTag key={tagId} categoryColor={category.color}>                      {tag.label}                      <RemoveTag onClick={() => handleTagToggle(tagId)}>Ã—</RemoveTag>                    </SelectedTag>                  );                })}              </SelectedTagsList>            </SelectedTagsSection>          )}        </TagSection>        <h3>Additional Information</h3>        <FormGrid>            <FormGroup>            <label>Fever</label>            <Select name="fever" value={formData.fever} onChange={handleChange}>                <option>Yes</option>                <option>No</option>            </Select>            </FormGroup>            <FormGroup>            <label>Age</label>            <SliderContainer>                <Slider                type="range"                min="0"                max="100"                value={formData.age}                onChange={handleSliderChange}                />                <AgeLabel>{formData.age}</AgeLabel>            </SliderContainer>            </FormGroup>            <FormGroup>            <label>Cough</label>            <Select name="cough" value={formData.cough} onChange={handleChange}>                <option>Yes</option>                <option>No</option>            </Select>            </FormGroup>            <FormGroup>            <label>Gender</label>            <Select name="gender" value={formData.gender} onChange={handleChange}>                <option>Male</option>                <option>Female</option>            </Select>            </FormGroup>            <FormGroup>            <label>Fatigue</label>            <Select name="fatigue" value={formData.fatigue} onChange={handleChange}>                <option>Yes</option>                <option>No</option>            </Select>            </FormGroup>            <FormGroup>            <label>Blood Pressure</label>            <Select name="blood_pressure" value={formData.blood_pressure} onChange={handleChange}>                <option>Low</option>                <option>Normal</option>                <option>High</option>            </Select>            </FormGroup>            <FormGroup>            <label>Difficulty Breathing</label>            <Select                name="difficulty_breathing"                value={formData.difficulty_breathing}                onChange={handleChange}            >                <option>Yes</option>                <option>No</option>            </Select>            </FormGroup>            <FormGroup>            <label>Cholesterol Level</label>            <Select                name="cholesterol"                value={formData.cholesterol}                onChange={handleChange}            >                <option>Low</option>                <option>Normal</option>                <option>High</option>            </Select>            </FormGroup>        </FormGrid>        <SubmitButton onClick={handleSubmit}>Predict Disease</SubmitButton>        </FormContainer>)}        {submitted && !consultAI && (        <Divv>        <div className="head">            Analysis report:        </div>            <Diagnosis>                {}                {selectedTags.length > 0 && (                  <SymptomSummary>                    <h4>Analyzed Symptoms:</h4>                    <SymptomTagsList>                      {selectedTags.map(tagId => {                        const tag = availableTags.find(t => t.id === tagId);                        const category = tagCategories[tag.category];                        return (                          <SymptomTag key={tagId} categoryColor={category.color}>                            {tag.label}                          </SymptomTag>                        );                      })}                    </SymptomTagsList>                  </SymptomSummary>                )}                {outcome && (<Dig>                    <p>{notes}</p>                    {diagnosis != "undefined" ? (                    <>                        <p>                            The predicted outcome is: Positive                        </p>                        <p>                        It seems like you may be experiencing symptoms of{" "}                        <strong>{diagnosis}</strong>.                        </p>                        <p>Please consult a {DiseaseMapping[diagnosis]}.</p>                    </>                    ) : (                    "Your symptoms do not match any disease. Please consult a doctor."                    )}                </Dig>)}                {!outcome && (<Dig>                    <p>{notes}</p>                        <p>                            Your symptoms do not match any disease. Please consult a doctor.                        </p>                </Dig>)}                <div className="consultation-options">                    <div className="consultation-option">                    <p>Would you like assistance in finding a doctor nearby?</p>                    <ConsultDoctorButton onClick={handleConsultDoctor}>                        Yes, please find me a doctor                    </ConsultDoctorButton>                    </div>                    <div className="consultation-option">                    <p>Would you like any AI assistance regarding your symptoms?</p>                    <ConsultAI onClick={handleConsultAI}>                        Yes, get me AI assistance                    </ConsultAI>                    </div>                </div>                </Diagnosis>            </Divv>      )}      {consultAI && (        <AIConsult          symptoms={formData}          diagnosis={diagnosis}        ></AIConsult>      )}    </>  );};const FormContainer = styled.div`  padding: 40px;  color: #333;  border-radius: 8px;  max-width: 800px;  margin: 0 auto;  h2 {    font-size: 24px;    margin-bottom: 30px;  }`;const Divv = styled.div`  .head{    color: darkviolet;    font-size: 25px;    font-weight: 605;    margin: 50px 40px;  }`;const FormGrid = styled.div`  display: grid;  grid-template-columns: 1fr 1fr;  gap: 30px;`;const FormGroup = styled.div`  display: flex;  flex-direction: column;  label {    margin-bottom: 8px;    color: #101010;    font-size: 14px;  }`;const Select = styled.select`  background-color:rgb(163, 42, 233);  color: #fff;  padding: 10px;  border-radius: 8px;  border: none;  font-size: 16px;`;const SliderContainer = styled.div`  display: flex;  align-items: center;`;const Slider = styled.input`  width: 100%;  margin-right: 10px;  accent-color: #f472b6;`;const AgeLabel = styled.span`  color: #f472b6;  font-weight: bold;  font-size: 16px;`;const SubmitButton = styled.button`  margin-top: 40px;  padding: 12px 24px;  background-color: #f472b6;  color: #fff;  border: none;  border-radius: 8px;  font-size: 16px;  font-weight: bold;  cursor: pointer;  &:hover {    background-color: #ec4899;  }`;const Diagnosis = styled.div`  margin: 4px 0px;  text-align: center;  color: #222260;  font-weight: 400;  font-size: 20px;  padding: 20px;  display: flex;  flex-direction: column;  justify-content: space-between;  align-items: center;  .consultation-options {    margin: 60px 25px;    display: flex;    justify-content: space-between;  }  .consultation-option {    flex: 1;    margin-right: 18px;     cursor: pointer;  }`;const Dig = styled.div`  padding: 15px;  color: white;  border: 1px solid darkviolet;  border-radius: 5px;  font-size: 23px;  background-color: darkviolet;  margin: 38px auto;`;const ConsultDoctorButton = styled.button`  padding: 10px 20px;  background-color: #222260;  color: #fff;  border: none;  border-radius: 5px;  cursor: pointer;  transition: background-color 0.3s ease;  &:hover {    background-color: white;    color: darkviolet;  }  margin-top: 20px;  margin-bottom: 20px;`;const ConsultAI = styled.button`  padding: 10px 20px;  background-color: #222260;  color: #fff;  border: none;  border-radius: 5px;  cursor: pointer;  transition: background-color 0.3s ease;  &:hover {    background-color: white;    color: darkviolet;  }  margin-top: 20px;`;const TagSection = styled.div`  margin-bottom: 40px;  padding: 30px;  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);  border-radius: 12px;  border: 1px solid #e2e8f0;  h3 {    color: #1e293b;    font-size: 24px;    font-weight: 600;    margin-bottom: 8px;  }  p {    color: #64748b;    font-size: 16px;    margin-bottom: 24px;  }`;const TagCategory = styled.div`  margin-bottom: 24px;`;const CategoryHeader = styled.h4`  font-size: 18px;  font-weight: 600;  margin-bottom: 12px;  display: flex;  align-items: center;  &::before {    content: '';    width: 4px;    height: 20px;    background-color: currentColor;    margin-right: 12px;    border-radius: 2px;  }`;const TagGrid = styled.div`  display: flex;  flex-wrap: wrap;  gap: 8px;  margin-bottom: 16px;`;const Tag = styled.button`  padding: 8px 16px;  border: 2px solid ${props => props.selected ? props.categoryColor : '#e2e8f0'};  background-color: ${props => props.selected ? props.categoryColor : 'white'};  color: ${props => props.selected ? 'white' : '#374151'};  border-radius: 20px;  font-size: 14px;  font-weight: 500;  cursor: pointer;  transition: all 0.2s ease;  &:hover {    border-color: ${props => props.categoryColor};    background-color: ${props => props.selected ? props.categoryColor : `${props.categoryColor}15`};    transform: translateY(-1px);    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);  }`;const SelectedTagsSection = styled.div`  margin-top: 24px;  padding: 20px;  background-color: white;  border-radius: 8px;  border: 1px solid #e2e8f0;  h4 {    color: #1e293b;    font-size: 16px;    font-weight: 600;    margin-bottom: 12px;  }`;const SelectedTagsList = styled.div`  display: flex;  flex-wrap: wrap;  gap: 8px;`;const SelectedTag = styled.div`  display: flex;  align-items: center;  padding: 6px 12px;  background-color: ${props => props.categoryColor};  color: white;  border-radius: 16px;  font-size: 14px;  font-weight: 500;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);`;const RemoveTag = styled.button`  background: none;  border: none;  color: white;  font-size: 18px;  font-weight: bold;  margin-left: 8px;  cursor: pointer;  padding: 0;  width: 20px;  height: 20px;  border-radius: 50%;  display: flex;  align-items: center;  justify-content: center;  &:hover {    background-color: rgba(255, 255, 255, 0.2);  }`;const SymptomSummary = styled.div`  margin-bottom: 24px;  padding: 20px;  background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);  border-radius: 12px;  border: 1px solid #0891b2;  h4 {    color: #0f172a;    font-size: 18px;    font-weight: 600;    margin-bottom: 12px;  }`;const SymptomTagsList = styled.div`  display: flex;  flex-wrap: wrap;  gap: 8px;`;const SymptomTag = styled.div`  padding: 6px 12px;  background-color: ${props => props.categoryColor};  color: white;  border-radius: 16px;  font-size: 14px;  font-weight: 500;  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);`;export default SymptomAnalysis;