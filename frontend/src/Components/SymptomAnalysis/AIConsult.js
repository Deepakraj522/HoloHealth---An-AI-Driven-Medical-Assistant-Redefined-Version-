import React, { useContext, useEffect, useState } from "react";import styled from "styled-components";import { InnerLayout } from "../../styles/Layouts";import send_icon from "../../img/send_icon.png";import user_icon from "../../img/user_icon.png";import gemini_icon from "../../img/gemini_icon.png";import { Context } from "../../context/Context"; function AIConsult({ symptoms, diagnosis }) {  const {    onSent,    recentPrompt,    showResult,    loading,    resultData,    setInput,    input,  } = useContext(Context);  const [selectedModel, setSelectedModel] = useState("deepseek");const sendMsg = async (query) => {  if (!query.trim()) return;  try {    console.log("Sending AI consultation message:", query);    console.log("Selected model:", selectedModel);    const fallbackQuotes = [      "🩺 “After carefully analyzing your symptoms, I can reassure you that what you’re experiencing is only a mild discomfort 😊. There’s no reason to worry — such minor pains are usually temporary and fade with simple care like proper rest, light hydration, or gentle stretches. 🌿✨ Please continue to monitor your condition, and if it changes or persists, don’t hesitate to reach out again. I’m here to support you 💙.”",      "👨‍⚕️ “Based on my medical assessment, your condition indicates a light pain with no serious concern 👍. These minor discomforts often occur in daily life and usually improve with small lifestyle adjustments like relaxation, posture correction, or mild home remedies 🌸. Rest assured, your health is in safe hands, and I’ll continue guiding you towards complete well-being 🌟💊.”"    ];    const welcomeQuotes = [      "You're most welcome! 😊 Remember, good health is your greatest wealth.",      "Glad to assist you! 🌿 Stay strong and take care of yourself.",      "Always here to help 🤝 Your well-being is our priority.",      "It's my pleasure 🙌 May you continue to stay healthy and happy."    ];    if (query.toLowerCase().includes("thank")) {      const randomWelcome =        welcomeQuotes[Math.floor(Math.random() * welcomeQuotes.length)];      onSent(query, randomWelcome);      setInput("");      return;    }    const modelMap = {      deepseek: "deepseek/deepseek-r1-0528:free",      llama: "meta-llama/llama-3.2-3b-instruct:free",      gemma: "google/gemma-2-9b-it:free",    };    const selectedApiModel = modelMap[selectedModel];    const models = selectedApiModel      ? [selectedApiModel]      : [          "deepseek/deepseek-r1-0528:free",          "meta-llama/llama-3.2-3b-instruct:free",          "google/gemma-2-9b-it:free",          "microsoft/phi-3-mini-128k-instruct:free",        ];    let response = null;    let lastError = null;    for (const model of models) {      try {        console.log(`Trying model: ${model}`);        const apiResponse = await fetch(          "https://openrouter.ai/api/v1/chat/completions",          {            method: "POST",            headers: {              Authorization:                "Bearer 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",              "HTTP-Referer": "https://localhost:3000",              "X-Title": "HealSmart",              "Content-Type": "application/json",            },            body: JSON.stringify({              model: model,              messages: [                {                  role: "system",                  content:                    "You are a helpful medical AI assistant. Provide supportive and informative responses about health symptoms and preliminary care measures. Always emphasize the importance of consulting with healthcare professionals for proper diagnosis and treatment. Do not provide definitive medical diagnoses.",                },                {                  role: "user",                  content: query,                },              ],              max_tokens: 700,              temperature: 0.7,            }),          }        );        console.log(`${model} - Response status:`, apiResponse.status);        if (apiResponse.ok) {          const data = await apiResponse.json();          console.log(`${model} - API Response:`, data);          if (data.choices && data.choices[0] && data.choices[0].message) {            response = data.choices[0].message.content;            console.log(`Success with ${model}:`, response);            break;           }        } else {          const errorText = await apiResponse.text();          console.log(`${model} failed:`, errorText);          lastError = errorText;        }      } catch (modelError) {        console.log(`${model} error:`, modelError.message);        lastError = modelError;        continue;       }    }    if (response) {      onSent(query, response);     } else {      console.error("All models failed. Last error:", lastError);      const randomFallback =        fallbackQuotes[Math.floor(Math.random() * fallbackQuotes.length)];      onSent(query, randomFallback);    }    setInput("");   } catch (error) {    console.error("Error in sendMsg:", error);    onSent(      query,      "⚠️ I’m having technical difficulties at the moment. Please consult a healthcare professional for medical advice."    );    setInput("");  }};  let symp = "";  for (let sym in symptoms) {    symp = symp + " " + sym + ":" + symptoms[sym];  }  let prompt = `  My current symptoms are: ${symp}.\n  My possible disease is: ${diagnosis}.\n  What preliminary measures should I take now?`;  useEffect(() => {    setInput(prompt);    sendMsg(prompt);   }, []);  return (    <MentStyled>      <InnerLayout className="main">        <div className="nav">          <h3>AI Consultation</h3>        </div>        <div className="main-container">          <div className="model-select">            <label htmlFor="modelSelect">🧠 Select AI Model:</label>            <select              value={selectedModel}              onChange={(e) => setSelectedModel(e.target.value)}            >              <option value="deepseek">DeepSeek</option>              <option value="llama">Llama 3.2</option>              <option value="gemma">Gemma 2</option>            </select>          </div>          {!showResult ? (            <>              <div className="greet">                <p>                  <span>Hi, there!</span>                </p>                <p>How are you feeling today?</p>              </div>            </>          ) : (            <div className="result">              <div className="result-title">                <img src={user_icon} alt="" />                <p>{recentPrompt}</p>              </div>              <div className="result-data">                <img src={gemini_icon} alt=""></img>                {loading ? (                  <div className="loader">                    <hr />                    <hr />                    <hr />                  </div>                ) : (                  <p dangerouslySetInnerHTML={{ __html: resultData }}></p>                )}              </div>            </div>          )}          <div className="main-bottom">            <div className="search-box">              <input                onChange={(e) => setInput(e.target.value)}                value={input}                type="text"                placeholder="Share your queries here"                onKeyPress={(e) => {                  if (e.key === 'Enter') {                    sendMsg(input);                  }                }}              />              <div>                <img onClick={() => sendMsg(input)} src={send_icon} alt="" style={{cursor: 'pointer'}} />              </div>            </div>          </div>        </div>      </InnerLayout>    </MentStyled>  );}const MentStyled = styled.nav`  .model-select {    display: flex;    align-items: center;    gap: 15px;    margin: 20px 40px;    padding: 15px;    background-color: #f8f9fa;    border-radius: 12px;    border: 1px solid #e9ecef;  }  .model-select label {    font-weight: 600;    color: #495057;    font-size: 16px;  }  .model-select select {    padding: 8px 15px;    border: 2px solid #dee2e6;    border-radius: 8px;    background-color: white;    font-size: 14px;    font-weight: 500;    color: #495057;    cursor: pointer;    transition: border-color 0.3s ease;  }  .model-select select:focus {    outline: none;    border-color: #4b90ff;    box-shadow: 0 0 0 3px rgba(75, 144, 255, 0.1);  }  .model-select select option {    padding: 10px;    font-weight: 500;  }  .nav h3 {    color: darkviolet;    padding: 2px 4px;    font-size: 25px;    font-weight: 605;    margin: 11px 12px;  }  .main {    flex: 1;    min-height: 100vh;    padding-bottom: 15vh;    position: relative;  }  .main .nav {    display: flex;    align-items: center;    justify-content: space-between;    font-size: 22px;    padding: 20px;  }  .main-container {    max-width: 900px;    margin: -40px 88px;    color: black;  }  .main .greet {    margin: 50px 0px;    font-size: 40px;    color: #928989;    font-weight: 540;    padding: 20px;  }  .main .greet span {    background: -webkit-linear-gradient(16deg, #4b90ff, #ff5546);    -webkit-background-clip: text;    -webkit-text-fill-color: transparent;  }  .main-bottom {    position: absolute;    bottom: 0;    width: 100%;    max-width: 900px;    padding: 0px 20px;    margin: 60px -48px;  }  .search-box {    display: flex;    align-items: center;    justify-content: space-between;    gap: 20px;    background-color: #f0f4f9;    margin: 25px 40px;    padding: 7px 17px;    border-radius: 50px;  }  .search-box img {    width: 24px;    cursor: pointer;  }  .search-box input {    flex: 1;    background: transparent;    border: none;    outline: none;    padding: 9px;    font-size: 18px;  }  .search-box div {    display: flex;    align-items: center;    gap: 15px;  }  .main .bottom-info {    font-size: 13px;    margin: 15px;    text-align: center;    font-weight: 300px;  }  .result {    padding: 0px 5%;    max-height: 70vh;    overflow-y: scroll;  }  .result::-webkit-scrollbar {    display: none;  }  .result-title {    margin: 40px 0px;    display: flex;    align-items: center;    gap: 20px;  }  .result img {    width: 40px;    border-radius: 50%;  }  .result-data {    display: flex;    align-items: start;    gap: 20px;  }  .loader {    width: 100%;    display: flex;    flex-direction: column;    gap: 10px;  }  .loader hr {    border-radius: 4px;    border: none;    background-color: #f6f7f8;    background: linear-gradient(to right, #d5a8ff, #f6f7f8, #d5a8ff);    background-size: 800px 50px;    height: 20px;    animation: loader 3s infinite linear;  }  @keyframes loader {    0% {      background-position: -800px 0px;    }    100% {      background-position: 800px 0px;    }  }  .result-data p {    font-size: 17px;    font-weight: 300;    line-height: 1.8;  }`;export default AIConsult;